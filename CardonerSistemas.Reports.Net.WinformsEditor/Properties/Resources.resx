<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="StringBrushes" xml:space="preserve">
    <value>Brushes</value>
  </data>
  <data name="StringColor" xml:space="preserve">
    <value>Color</value>
  </data>
  <data name="StringDatasource" xml:space="preserve">
    <value>Datasource</value>
  </data>
  <data name="StringDatasourceProvidersSqlServer" xml:space="preserve">
    <value>MS SQL Server</value>
  </data>
  <data name="StringDatasourceProvidersOracle" xml:space="preserve">
    <value>Oracle</value>
  </data>
  <data name="StringDatasourceProvidersOdbc" xml:space="preserve">
    <value>ODBC</value>
  </data>
  <data name="StringDatasourceProvidersOleDb" xml:space="preserve">
    <value>OleDb</value>
  </data>
  <data name="StringDatasourceTypeStoredProcedure" xml:space="preserve">
    <value>Stored procedure</value>
  </data>
  <data name="StringDatasourceTypeTableDirect" xml:space="preserve">
    <value>Table direct</value>
  </data>
  <data name="StringDatasourceTypeText" xml:space="preserve">
    <value>Text</value>
  </data>
  <data name="StringFonts" xml:space="preserve">
    <value>Fonts</value>
  </data>
  <data name="StringLines" xml:space="preserve">
    <value>Lines</value>
  </data>
  <data name="StringRectangles" xml:space="preserve">
    <value>Rectangles</value>
  </data>
  <data name="StringReportNameNew" xml:space="preserve">
    <value>* New report *</value>
  </data>
  <data name="StringSections" xml:space="preserve">
    <value>Sections</value>
  </data>
  <data name="StringTexts" xml:space="preserve">
    <value>Texts</value>
  </data>
  <data name="StringDatasourceProvidersDataSet" xml:space="preserve">
    <value>DataSet</value>
  </data>
  <data name="StringPageOrientationPortrait" xml:space="preserve">
    <value>Portrait</value>
  </data>
  <data name="StringPageOrientationLandscape" xml:space="preserve">
    <value>Landscape</value>
  </data>
  <data name="StringReportPageSizeA0" xml:space="preserve">
    <value>A0</value>
  </data>
  <data name="StringReportPageSizeA1" xml:space="preserve">
    <value>A1</value>
  </data>
  <data name="StringReportPageSizeA2" xml:space="preserve">
    <value>A2</value>
  </data>
  <data name="StringReportPageSizeA3" xml:space="preserve">
    <value>A3</value>
  </data>
  <data name="StringReportPageSizeA4" xml:space="preserve">
    <value>A4</value>
  </data>
  <data name="StringReportPageSizeA5" xml:space="preserve">
    <value>A5</value>
  </data>
  <data name="StringReportPageSizeRA0" xml:space="preserve">
    <value>RA0</value>
  </data>
  <data name="StringReportPageSizeRA1" xml:space="preserve">
    <value>RA1</value>
  </data>
  <data name="StringReportPageSizeRA2" xml:space="preserve">
    <value>RA2</value>
  </data>
  <data name="StringReportPageSizeRA3" xml:space="preserve">
    <value>RA3</value>
  </data>
  <data name="StringReportPageSizeRA4" xml:space="preserve">
    <value>RA4</value>
  </data>
  <data name="StringReportPageSizeRA5" xml:space="preserve">
    <value>RA5</value>
  </data>
  <data name="StringReportPageSizeB0" xml:space="preserve">
    <value>B0</value>
  </data>
  <data name="StringReportPageSizeB1" xml:space="preserve">
    <value>B1</value>
  </data>
  <data name="StringReportPageSizeB2" xml:space="preserve">
    <value>B2</value>
  </data>
  <data name="StringReportPageSizeB3" xml:space="preserve">
    <value>B3</value>
  </data>
  <data name="StringReportPageSizeB4" xml:space="preserve">
    <value>B4</value>
  </data>
  <data name="StringReportPageSizeB5" xml:space="preserve">
    <value>B5</value>
  </data>
  <data name="StringReportPageSizeQuarto" xml:space="preserve">
    <value>Quarto</value>
  </data>
  <data name="StringReportPageSizeFoolscap" xml:space="preserve">
    <value>Foolscap</value>
  </data>
  <data name="StringReportPageSizeExecutive" xml:space="preserve">
    <value>Executive</value>
  </data>
  <data name="StringReportPageSizeGovernmentLetter" xml:space="preserve">
    <value>Government Letter</value>
  </data>
  <data name="StringReportPageSizeLetter" xml:space="preserve">
    <value>Letter</value>
  </data>
  <data name="StringReportPageSizeLegal" xml:space="preserve">
    <value>Legal</value>
  </data>
  <data name="StringReportPageSizeLedger" xml:space="preserve">
    <value>Ledger</value>
  </data>
  <data name="StringReportPageSizeTabloid" xml:space="preserve">
    <value>Tabloid</value>
  </data>
  <data name="StringReportPageSizePost" xml:space="preserve">
    <value>Post</value>
  </data>
  <data name="StringReportPageSizeCrown" xml:space="preserve">
    <value>Crown</value>
  </data>
  <data name="StringReportPageSizeLargePost" xml:space="preserve">
    <value>Large Post</value>
  </data>
  <data name="StringReportPageSizeDemy" xml:space="preserve">
    <value>Demy</value>
  </data>
  <data name="StringReportPageSizeMedium" xml:space="preserve">
    <value>Medium</value>
  </data>
  <data name="StringReportPageSizeRoyal" xml:space="preserve">
    <value>Royal</value>
  </data>
  <data name="StringReportPageSizeElephant" xml:space="preserve">
    <value>Elephant</value>
  </data>
  <data name="StringReportPageSizeDoubleDemy" xml:space="preserve">
    <value>Double Demy</value>
  </data>
  <data name="StringReportPageSizeQuadDemy" xml:space="preserve">
    <value>Quad Demy</value>
  </data>
  <data name="StringReportPageSizeSTMT" xml:space="preserve">
    <value>STMT</value>
  </data>
  <data name="StringReportPageSizeFolio" xml:space="preserve">
    <value>Folio</value>
  </data>
  <data name="StringReportPageSizeStatement" xml:space="preserve">
    <value>Statement</value>
  </data>
  <data name="StringReportPageSizeSize10x14" xml:space="preserve">
    <value>10x14</value>
  </data>
  <data name="StringUndefined" xml:space="preserve">
    <value>Undefined</value>
  </data>
  <data name="StringDatasourceProviderRequired" xml:space="preserve">
    <value>Must specify provider.</value>
  </data>
  <data name="StringDatasourceConnectionStringRequired" xml:space="preserve">
    <value>Must specify connection string.</value>
  </data>
  <data name="StringDatasourceTextRequired" xml:space="preserve">
    <value>Must specify text.</value>
  </data>
  <data name="StringDatasourceFieldsGetWithNullParametersConfirmation" xml:space="preserve">
    <value>There are parameters with unspecified values. Do you want to continue anyway?</value>
  </data>
  <data name="StringReportModifiedConfirmation" xml:space="preserve">
    <value>The report has unsaved changes.
Do you want to save them?</value>
  </data>
  <data name="StringFileDialogFilter" xml:space="preserve">
    <value>Report files (*.csrpt)|*.csrpt|All files (*.*)|*.*</value>
  </data>
  <data name="StringDatasourceParameterNameNew" xml:space="preserve">
    <value>* New *</value>
  </data>
  <data name="StringDatasourceParameterNameRequired" xml:space="preserve">
    <value>Must specify name.</value>
  </data>
  <data name="StringDatasourceParameterTypeRequired" xml:space="preserve">
    <value>Must specify type.</value>
  </data>
  <data name="StringReportNameRequired" xml:space="preserve">
    <value>Must specify name.</value>
  </data>
  <data name="StringReportPageSizeRequired" xml:space="preserve">
    <value>Must specify page size.</value>
  </data>
  <data name="StringReportPageOrientationRequired" xml:space="preserve">
    <value>Must specify page orientation.</value>
  </data>
  <data name="StringDatasourceTypeRequired" xml:space="preserve">
    <value>Must specify type.</value>
  </data>
  <data name="StringDatasourceParameters" xml:space="preserve">
    <value>Parameters</value>
  </data>
  <data name="StringDatasourceFields" xml:space="preserve">
    <value>Fields</value>
  </data>
  <data name="StringDatasourceParametersCounterEmpty" xml:space="preserve">
    <value>There are not parameters.</value>
  </data>
  <data name="StringDatasourceFieldsCounterEmpty" xml:space="preserve">
    <value>There are not fields.</value>
  </data>
  <data name="StringDatasourceParametersCounterOne" xml:space="preserve">
    <value>There is one parameter.</value>
  </data>
  <data name="StringDatasourceFieldsCounterOne" xml:space="preserve">
    <value>There is one field.</value>
  </data>
  <data name="StringDatasourceParametersCounter" xml:space="preserve">
    <value>There are {0} parameters.</value>
  </data>
  <data name="StringDatasourceFieldsCounter" xml:space="preserve">
    <value>There are {0} fields.</value>
  </data>
  <data name="StringDatasourceParametersAdd" xml:space="preserve">
    <value>Add parameter</value>
  </data>
  <data name="StringDatasourceFieldsAdd" xml:space="preserve">
    <value>Add field</value>
  </data>
  <data name="StringApplyChanges" xml:space="preserve">
    <value>Apply</value>
  </data>
  <data name="StringResetChanges" xml:space="preserve">
    <value>Reset</value>
  </data>
  <data name="StringDatasourceFieldNameNew" xml:space="preserve">
    <value>* New *</value>
  </data>
  <data name="StringNodeItemsCount" xml:space="preserve">
    <value> - (count: {0})</value>
  </data>
  <data name="StringDatasourceDeleteConfirmation" xml:space="preserve">
    <value>Are you sure you want to delete the datasource?</value>
  </data>
  <data name="StringDatasourceParameterDeleteConfirmation" xml:space="preserve">
    <value>Are you sure you want to delete the datasource parameter named '{0}'?</value>
  </data>
  <data name="StringDatasourceFieldDeleteConfirmation" xml:space="preserve">
    <value>Are you sure you want to delete the datasource field named '{0}'?</value>
  </data>
  <data name="StringDatasourceParameterNewAlreadyExists" xml:space="preserve">
    <value>There is already a new parameter created.</value>
  </data>
  <data name="StringDatasourceFieldNewAlreadyExists" xml:space="preserve">
    <value>There is already a new field created.</value>
  </data>
  <data name="StringDatasourceParameterNameAlreadyExists" xml:space="preserve">
    <value>There is already a parameter with this name.</value>
  </data>
  <data name="StringDatasourceFieldNameAlreadyExists" xml:space="preserve">
    <value>There is already a field with this name.</value>
  </data>
  <data name="StringDatasourceFieldNameRequired" xml:space="preserve">
    <value>Must specify name.</value>
  </data>
  <data name="StringDatasourceFieldTypeRequired" xml:space="preserve">
    <value>Must specify type.</value>
  </data>
  <data name="StringDatasourceFieldsGetConfirmation" xml:space="preserve">
    <value>Do you want to refresh the fields of the datasource?</value>
  </data>
</root>